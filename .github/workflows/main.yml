name: CI

on:
  push:
    branches:
      - main
      - develop
      - feature/**
    tags:
      - "*.*.*"
  pull_request:
    branches:
      - main
      - develop

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

env:
  GO_VERSION: '1.21.x'

jobs:
  lint-build:
    name: Vet, Test and Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup and install
        uses: ./.github/actions/setup-and-install
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Go version
        run: go version

      - name: Format check
        run: |
          if [ -n "$(gofmt -l .)" ]; then echo "Go files not formatted" && gofmt -d . && exit 1; fi

      - name: Vet
        run: go vet ./...

      - name: Test
        run: go test ./... -v

      - name: Build binary
        run: go build ./cmd/quotes

  docker-publish:
    name: Build and Publish Docker Image
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    needs: [lint-build]
    env:
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      IMAGE_NAME: ${{ secrets.DOCKER_IMAGE_NAME }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=tag
            type=sha

      - name: Build and push production image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile
          push: true
          tags: |
            ${{ steps.meta.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          labels: ${{ steps.meta.outputs.labels }}

      - name: Build and push migration image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile
          target: migration
          push: true
          tags: |
            ${{ env.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}-migration
          cache-from: type=gha
          cache-to: type=gha,mode=max
          labels: ${{ steps.meta.outputs.labels }}

      - name: Check ArgoCD connection
        uses: clowdhaus/argo-cd-action@v2.3.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          version: 3.1.8
          command: version
          options: >
            --grpc-web
            --server ${{ secrets.ARGOCD_URL }}
            --auth-token ${{ secrets.ARGOCD_TOKEN }}

      - name: Update ArgoCD app with new production image tag
        uses: clowdhaus/argo-cd-action@v2.3.0
        with:
          version: 3.1.8
          command: app set network-mavryk-external-data
          options: >
            -p image.tag=${{ steps.meta.outputs.version }}
            --grpc-web
            --server ${{ secrets.ARGOCD_URL }}
            --auth-token ${{ secrets.ARGOCD_TOKEN }}
            --revision main

      - name: Sync ArgoCD app
        uses: clowdhaus/argo-cd-action@v2.3.0
        with:
          version: 3.1.8
          command: app sync network-mavryk-external-data
          options: >
            --grpc-web
            --server ${{ secrets.ARGOCD_URL }}
            --prune
            --auth-token ${{ secrets.ARGOCD_TOKEN }}
            --revision main
